pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command: ["cat"]
    tty: true
"""
      defaultContainer 'kaniko'
    }
  }

  environment {
    DOCKERHUB_USERNAME = credentials('Cheeza42-username')
    DOCKERHUB_PASSWORD = credentials('Cheeza42-password')
    IMAGE_NAME      = 'docker.io/cheeza42/dockerizing-project'
    DOCKERFILE_PATH = 'Rolling_project_part_2/dockerfile'
    BUILD_CONTEXT   = 'Rolling_project_part_2'
  }

  stages {
    stage('Clone Repository') {
      steps {
        git branch: 'main', url: 'https://github.com/cheeza42/Rolling_project_part_2.git'
      }
    }

    stage('Compute Tag') {
      steps {
        script {
          def sha = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
          def ts  = sh(returnStdout: true, script: "date +%Y%m%d-%H%M%S").trim()
          env.IMAGE_TAG = "${ts}-${sha}"
          echo "IMAGE_TAG=${env.IMAGE_TAG}"
        }
      }
    }

    stage('Parallel Checks') {
      parallel {
        stage('Linting') {
          steps {
            sh '''
              echo "[MOCK] flake8/hadolint/shellcheck passed (skipped for Kaniko setup)"
            '''
          }
        }
        stage('Security Scan') {
          steps {
            sh '''
              echo "[MOCK] bandit/trivy scan passed (skipped for Kaniko setup)"
            '''
          }
        }
      }
    }

    stage('Build & Push (Kaniko)') {
      steps {
        sh '''
          set -e
          mkdir -p /workspace/.docker
          AUTH=$(printf "%s" "${DOCKERHUB_USERNAME}:${DOCKERHUB_PASSWORD}" | base64 | tr -d '\\n')
          cat > /workspace/.docker/config.json <<EOF
          {"auths":{"https://index.docker.io/v1/":{"auth":"${AUTH}"}}}
          EOF

          /kaniko/executor \
            --context="${BUILD_CONTEXT}" \
            --dockerfile="${DOCKERFILE_PATH}" \
            --destination="${IMAGE_NAME}:${IMAGE_TAG}" \
            --destination="${IMAGE_NAME}:latest" \
            --docker-config=/workspace/.docker
        '''
      }
    }
  }

  post {
    success { echo "Pipeline completed successfully. Image pushed: ${IMAGE_NAME}:${IMAGE_TAG}" }
    failure { echo 'Pipeline failed! Check logs for details.' }
  }
}
