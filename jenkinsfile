pipeline {
  agent any
  options { timestamps(); ansiColor('xterm') }

  environment {
    DOCKERHUB_USERNAME = credentials('Cheeza42-username')  // string credential: Docker Hub username
    DOCKERHUB_PASSWORD = credentials('Cheeza42-password')  // string credential: Docker Hub password/token
    IMAGE_NAME      = 'docker.io/cheeza42/dockerizing-project'
    DOCKERFILE_PATH = 'Rolling_project_part_2/dockerfile'
    BUILD_CONTEXT   = 'Rolling_project_part_2'
  }

  stages {
    stage('Clone Repository') {
      steps {
        // TODO: set your real repo URL before running
        git branch: 'main', url: 'https://github.com/cheeza42/Rolling_project_part_2.git'
      }
    }

    stage('Compute Tag') {
      steps {
        script {
          def sha = sh(returnStdout:true, script:"git rev-parse --short HEAD").trim()
          def ts  = sh(returnStdout:true, script:"date +%Y%m%d-%H%M%S").trim()
          env.IMAGE_TAG = "${ts}-${sha}"
          echo "IMAGE_TAG=${env.IMAGE_TAG}"
        }
      }
    }

    stage('Parallel Checks') {
      parallel {
        stage('Linting') {
          steps {
            sh '''
              set -e
              echo "==> flake8"
              if command -v flake8 >/dev/null 2>&1; then
                flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
                flake8 . --exit-zero --max-complexity=10 --max-line-length=120 --statistics
              else
                echo "[MOCK] flake8 passed (flake8 not installed)"
              fi

              echo "==> hadolint"
              if command -v hadolint >/dev/null 2>&1; then
                hadolint "${DOCKERFILE_PATH}" || true
              else
                echo "[MOCK] hadolint passed (hadolint not installed)"
              fi

              echo "==> shellcheck"
              if command -v shellcheck >/dev/null 2>&1; then
                find . -type f -name "*.sh" -print0 | xargs -0 -r shellcheck -S warning || true
              else
                echo "[MOCK] shellcheck passed (shellcheck not installed)"
              fi
            '''
          }
        }

        stage('Security Scan') {
          steps {
            sh '''
              set -e
              echo "==> bandit"
              if command -v bandit >/dev/null 2>&1; then
                bandit -r . -ll || true
              else
                echo "[MOCK] bandit passed (bandit not installed)"
              fi

              echo "==> trivy fs"
              if command -v trivy >/dev/null 2>&1; then
                trivy fs --exit-code 0 --severity HIGH,CRITICAL .
              else
                echo "[MOCK] trivy fs scan passed (trivy not installed)"
              fi
            '''
          }
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        sh '''
          echo "==> docker build"
          docker build -t "${IMAGE_NAME}:${IMAGE_TAG}" -t "${IMAGE_NAME}:latest" \
            -f "${DOCKERFILE_PATH}" "${BUILD_CONTEXT}"
        '''
      }
    }

    stage('Push to Docker Hub') {
      steps {
        sh """
          echo "==> docker login"
          echo '${DOCKERHUB_PASSWORD}' | docker login -u '${DOCKERHUB_USERNAME}' --password-stdin

          echo "==> docker push"
          docker push '${IMAGE_NAME}:${IMAGE_TAG}'
          docker push '${IMAGE_NAME}:latest'
        """
        sh 'docker logout || true'    
      }
    }
  }

  post {
    success { echo "Pipeline completed successfully. Image pushed: ${IMAGE_NAME}:${IMAGE_TAG}" }
    failure { echo 'Pipeline failed! Check logs for details.' }
    always  { echo 'Cleanup done' }  // no sh here
  }
}
